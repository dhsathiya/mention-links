/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Main scripts, loaded on all pages.\n *\n * @package wp-mentions-links\n */\n\n/**\n * Post and User Autocompleter hooks.\n *\n * @see https://developer.wordpress.org/block-editor/components/autocomplete/\n */\nconst excludedBlocks = [];\nconst postCompleter = {\n  name: 'posts-completer',\n  triggerPrefix: '#',\n  isDebounced: true,\n  options: async search => {\n    let queryString = '';\n\n    if (search) {\n      queryString = '?search=' + encodeURIComponent(search);\n    }\n\n    let returnArray = [];\n\n    if ('undefined' !== typeof wpMentionsLinks.supportedCPTs) {\n      for (let i in wpMentionsLinks.supportedCPTs) {\n        returnArray = returnArray.concat(await wp.apiFetch({\n          path: '/wp/v2/' + wpMentionsLinks.supportedCPTs[i] + '' + queryString\n        }));\n      }\n    } else {\n      returnArray = returnArray.concat(await wp.apiFetch({\n        path: '/wp/v2/posts' + queryString\n      }));\n      returnArray = returnArray.concat(await wp.apiFetch({\n        path: '/wp/v2/pages' + queryString\n      }));\n    }\n\n    return returnArray;\n  },\n  getOptionKeywords: post => post.title.rendered.split(/\\s+/),\n  getOptionLabel: post => [wp.element.createElement(\"span\", {\n    class: \"dashicons dashicons-text-page\"\n  }), wp.element.createElement(\"span\", null, \"\\xA0\", 30 < post.title.rendered.length ? post.title.rendered.substring(0, 30) + '...' : post.title.rendered) // Add ellipsis.\n  ],\n  getOptionCompletion: post => wp.element.createElement(\"a\", {\n    href: post.link\n  }, post.title.rendered)\n};\n/**\n * Hook to modify the existing user autocomplete for username hyperlink and attach post autocomplete.\n * @param {array}  completers Aray of autocompleter objects.\n * @param {string} blockName  Name of the block.\n *\n * @return {array} Array of autocompleter objects.\n */\n\nfunction filterAutcompleters(completers, blockName) {\n  // Check if the autocompleter is excluded for the block.\n  if (excludedBlocks.includes(blockName)) {\n    return completers;\n  } // Find the index of existing user autocompleter.\n\n\n  const userCompleterIndex = completers.findIndex(completer => 'users' === completer.name);\n  let field = 'name';\n\n  if ('undefined' !== typeof wpMentionsLinks.selectedUserField && 'username' === wpMentionsLinks.selectedUserField) {\n    field = 'slug';\n  } // Replace the render function of existing user autocompleter to add link.\n\n\n  if (completers[userCompleterIndex]) {\n    completers[userCompleterIndex].getOptionCompletion = response => {\n      console.log(response);\n      return wp.element.createElement(\"a\", {\n        href: response.link\n      }, response[field]);\n    };\n  } // Attach post autocompleter.\n\n\n  return [...completers, postCompleter];\n}\n\nwp.hooks.addFilter('editor.Autocomplete.completers', 'mentions/autocompleters/posts-completer', filterAutcompleters);\n\n//# sourceURL=webpack:///./src/js/main.js?");

/***/ })

/******/ });